正则表达式
1 说到底是是一个强大的字符串匹配工具
2 那先把正则经常用的一些符号集写出来
3 [a-z] [0-9] [A-Z] [^abc]
4 ^ 行起始标记
5 $ 行尾标记
6 . 任意非空白符
7 ? 匹配前面字符0 或 1次
8 + 匹配前面字符1或多次
9 * 0或者多次
10 () 创建一个用于匹配的字串
11 {n}指定前面的模式匹配的次数
12 {n,}
13 {n,m}
14 \转义 比如 \. \| \^ \$
15 用grep 在文件中搜索文本
一个最基本的用法 grep 字符串 文件名
1 grep 可以从stdin 读取数据 echo -e "1\n2" | grep 2
2 正则 bre 基本正则表达式 ere 扩展正则表达式 pre Perl 正则表达式
3 如果不加 grep -E的话 则类似 "[a-z]+" filename 这样的表达式是用不了的
4 grep -o pattern filename 只显示文件中符合模式的字符串
5 可以通过grep -o [] | wc -l 统计匹配的字符串有多少个
6 echo gun is not linux | grep -bo "not" 这样可以匹配出字符串在所处哪行的位置 从0开始
7 实用的技巧来了 我要从 一堆文件中查找特定的函数 我只需要
 进入源代码文件夹中 grep "somefunc()" . -rn 递归查找 加上行号回显 明显的'.' 可以换成路径
8 grep -i 忽略大小写
9 grep -e pattern1 -e pattern2
10 echo "1 2 3" | grep -e "1" -e "2" -e "3"
11 grep -f 通过文件指定模式 然后该怎么匹配怎么匹配
12 grep "main()" . -r --include *.{c,cpp} 搜索当前路径下所有 .c .cpp文件
13 grep "main()" . -r --exclude "readme"
14 这一块如果我们需要指定不背包含的列表 --exclude-from file
15 grep 找到包含特定字符串的文件 通过安全的方式删除 grep "pattern" filename -lz | xargs -0 rm -f
很关键的grep -q 静默模式 然后通过 if [ $? -eq 0 ] 判断grep 是否执行成功

grep 默认打印 模式所在的行 我们可以添加参数 打印模式所在行的上下还有区间的行的内容
这一块的内容通过  seq 这个命令来演示最好了
seq 10 | grep 5 -A 3  会显示 5 6 7 8  注意 5是用特殊颜色显示的
seq 10 | grep 5 -B 3  2 3 4 5
seq 10 | grep 5 -C 3  2345678 以5为标志 前三行后三行
如果出现多个标志 每一段通过--分割开来


cat 的兄弟 cut (bullshit)


