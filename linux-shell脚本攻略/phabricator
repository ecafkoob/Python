代码审查管理工具  有gitlab github 的功能 集成了git subversion 等版本控制系统
有coverage

linter 标记具有疑义的代码片段的工具 用于静态文件检查

pre-commit 代码提交之前会执行的一个简单的脚本程序检测文件名 tab 空格使用等一些问题
检测通过提交 失败就 就提交失败

让代码审查称为一种习惯，通过相互讨论和学习来提高自己的开发能力最好不过。想着我写的代码会让别人去审
查，开发者会不由自主的更注重代码的可读性和逻辑性。相比强制性的进行代码审查，首先培养团队以产品和人
为中心的开发文化显得更为重要。虽然说不容易但是值得一试。相比其他的各种福利，多数开发者更为看重公司
的开发文化。即为了公司，也为了开发者自己更高效的开发

gerrit 配合持续集成特别好 openstack chromium


这可能是最重要的一个提示了，如果你到了一个人人都喜欢Code Reivew的团阿，那么，你会进入到一个生机
勃勃的地方，在那里，每个人都能写出质量非常好的代码，在那里，你不需要经理的管理，团队会自适应一切变
化，他们相互学习，相互帮助，不仅仅是写出好的代码，而且团队和其中的每个人都会自动进化，最关键的是，
这个是一个团队。


arcanist 首次使用需要配置 phabricator 服务器地址  还有安装个人凭证  还要上传自己的private key
才能 clone from remote git server



如果你身处一个小团队并且认为不需要复杂的触发规则，那么你可以创建一个简单的审核工作流，如下所示：

创建一个新项目：“Code Audits”。
为代码提交创建一条全局规则：”Differential Revision” “does not exist”。在这条规则下，“Code Audits”项目的每一次提交都会触发一次审核请求。
所有工程师加入Code Audits项目。

通过这种方式，所有项目成员都将收到每一次代码提交的审核请求，但是，一旦某一位成员认可了这次提交，那么所有的审核请求便会消除。实际上，这种方式强制大家遵守了一条规则：任何提交都应该被人看到。一旦团队壮大，便可改进触发规则使每位开发人员只看到与他们有关的代码修改。

审核工具小贴士：
责任感。在审阅一次代码提交时，你所负责的审核是被突出显示的。你要为自己的任何审核行为负责。
在diff对比区域，点击行号将可添加内嵌评论。
在diff对比区域，在行号上拖动可添加跨越多行的内嵌评论。
内嵌评论最初只保存为草稿，直到你在页面底部提交评论。
按“?”键查看快捷键。
